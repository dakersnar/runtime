// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.

// TODO give credit for all of these tables to Intel

namespace System.Numerics
{
    /// <summary>
    /// An IEEE 754 compliant decimal64 type.
    /// </summary>
    public readonly partial struct Decimal64 // TODO is using partial classes like this preferred over the IeeeDecimalNumber idea?
    {

        //
        // bid_decimal_data.c // TODO make sure all of these end up getting used
        //

        // PORT: original table has more entries for more rounding modes, which were removed as we do not support rounding modes
        private static ReadOnlySpan<ulong> bid_round_const_table => new ulong[]
        {
            // RN
            0UL,  // 0 extra digits
            5UL,  // 1 extra digits
            50UL, // 2 extra digits
            500UL,    // 3 extra digits
            5000UL,   // 4 extra digits
            50000UL,  // 5 extra digits
            500000UL, // 6 extra digits
            5000000UL,    // 7 extra digits
            50000000UL,   // 8 extra digits
            500000000UL,  // 9 extra digits
            5000000000UL, // 10 extra digits
            50000000000UL,    // 11 extra digits
            500000000000UL,   // 12 extra digits
            5000000000000UL,  // 13 extra digits
            50000000000000UL, // 14 extra digits
            500000000000000UL,    // 15 extra digits
            5000000000000000UL,   // 16 extra digits
            50000000000000000UL,  // 17 extra digits
            500000000000000000UL  // 18 extra digits
        };

        // TODO bid_round_const_table_128 goes here

        // TODO bid_reciprocals10_128 goes here

        private static ReadOnlySpan<int> bid_recip_scale => new int[]
        {
            129 - 128,    // 1
            129 - 128,    // 1/10
            129 - 128,    // 1/10^2
            129 - 128,    // 1/10^3
            3,    // 131 - 128
            6,    // 134 - 128
            9,    // 137 - 128
            13,   // 141 - 128
            16,   // 144 - 128
            19,   // 147 - 128
            23,   // 151 - 128
            26,   // 154 - 128
            29,   // 157 - 128
            33,   // 161 - 128
            36,   // 164 - 128
            39,   // 167 - 128
            43,   // 171 - 128
            46,   // 174 - 128
            49,   // 177 - 128
            53,   // 181 - 128
            56,   // 184 - 128
            59,   // 187 - 128
            63,   // 191 - 128
            66,   // 194 - 128
            69,   // 197 - 128
            73,   // 201 - 128
            76,   // 204 - 128
            79,   // 207 - 128
            83,   // 211 - 128
            86,   // 214 - 128
            89,   // 217 - 128
            92,   // 220 - 128
            96,   // 224 - 128
            99,   // 227 - 128
            102,  // 230 - 128
            109,  // 237 - 128, 1/10^35
        };

        // tables used in computation
        private static ReadOnlySpan<int> bid_estimate_decimal_digits => new int[]
        {
            1,    //2^0 =1     < 10^0
            1,    //2^1 =2     < 10^1
            1,    //2^2 =4     < 10^1
            1,    //2^3 =8     < 10^1
            2,    //2^4 =16    < 10^2
            2,    //2^5 =32    < 10^2
            2,    //2^6 =64    < 10^2
            3,    //2^7 =128   < 10^3
            3,    //2^8 =256   < 10^3
            3,    //2^9 =512   < 10^3
            4,    //2^10=1024  < 10^4
            4,    //2^11=2048  < 10^4
            4,    //2^12=4096  < 10^4
            4,    //2^13=8192  < 10^4
            5,    //2^14=16384 < 10^5
            5,    //2^15=32768 < 10^5

            5,    //2^16=65536     < 10^5
            6,    //2^17=131072    < 10^6
            6,    //2^18=262144    < 10^6
            6,    //2^19=524288    < 10^6
            7,    //2^20=1048576   < 10^7
            7,    //2^21=2097152   < 10^7
            7,    //2^22=4194304   < 10^7
            7,    //2^23=8388608   < 10^7
            8,    //2^24=16777216  < 10^8
            8,    //2^25=33554432  < 10^8
            8,    //2^26=67108864  < 10^8
            9,    //2^27=134217728 < 10^9
            9,    //2^28=268435456 < 10^9
            9,    //2^29=536870912 < 10^9
            10,   //2^30=1073741824< 10^10
            10,   //2^31=2147483648< 10^10

            10,   //2^32=4294967296     < 10^10
            10,   //2^33=8589934592     < 10^10
            11,   //2^34=17179869184    < 10^11
            11,   //2^35=34359738368    < 10^11
            11,   //2^36=68719476736    < 10^11
            12,   //2^37=137438953472   < 10^12
            12,   //2^38=274877906944   < 10^12
            12,   //2^39=549755813888   < 10^12
            13,   //2^40=1099511627776  < 10^13
            13,   //2^41=2199023255552  < 10^13
            13,   //2^42=4398046511104  < 10^13
            13,   //2^43=8796093022208  < 10^13
            14,   //2^44=17592186044416 < 10^14
            14,   //2^45=35184372088832 < 10^14
            14,   //2^46=70368744177664 < 10^14
            15,   //2^47=140737488355328< 10^15

            15,   //2^48=281474976710656    < 10^15
            15,   //2^49=562949953421312    < 10^15
            16,   //2^50=1125899906842624   < 10^16
            16,   //2^51=2251799813685248   < 10^16
            16,   //2^52=4503599627370496   < 10^16
            16,   //2^53=9007199254740992   < 10^16
            17,   //2^54=18014398509481984  < 10^17
            17,   //2^55=36028797018963968  < 10^17
            17,   //2^56=72057594037927936  < 10^17
            18,   //2^57=144115188075855872 < 10^18
            18,   //2^58=288230376151711744 < 10^18
            18,   //2^59=576460752303423488 < 10^18
            19,   //2^60=1152921504606846976< 10^19
            19,   //2^61=2305843009213693952< 10^19
            19,   //2^62=4611686018427387904< 10^19
            19,   //2^63=9223372036854775808< 10^19

            20,   //2^64=18446744073709551616
            20,   //2^65=36893488147419103232
            20,   //2^66=73786976294838206464
            21,   //2^67=147573952589676412928
            21,   //2^68=295147905179352825856
            21,   //2^69=590295810358705651712
            22,   //2^70=1180591620717411303424
            22,   //2^71=2361183241434822606848
            22,   //2^72=4722366482869645213696
            22,   //2^73=9444732965739290427392
            23,   //2^74=18889465931478580854784
            23,   //2^75=37778931862957161709568
            23,   //2^76=75557863725914323419136
            24,   //2^77=151115727451828646838272
            24,   //2^78=302231454903657293676544
            24,   //2^79=604462909807314587353088

            25,   //2^80=1208925819614629174706176
            25,   //2^81=2417851639229258349412352
            25,   //2^82=4835703278458516698824704
            25,   //2^83=9671406556917033397649408
            26,   //2^84=19342813113834066795298816
            26,   //2^85=38685626227668133590597632
            26,   //2^86=77371252455336267181195264
            27,   //2^87=154742504910672534362390528
            27,   //2^88=309485009821345068724781056
            27,   //2^89=618970019642690137449562112
            28,   //2^90=1237940039285380274899124224
            28,   //2^91=2475880078570760549798248448
            28,   //2^92=4951760157141521099596496896
            28,   //2^93=9903520314283042199192993792
            29,   //2^94=19807040628566084398385987584
            29,   //2^95=39614081257132168796771975168
            29,   //2^96=79228162514264337593543950336

            30,   //2^97=158456325028528675187087900672
            30,   //2^98=316912650057057350374175801344
            30,   //2^99=633825300114114700748351602688
            31,   //2^100=1267650600228229401496703205376
            31,   //2^101=2535301200456458802993406410752
            31,   //2^102=5070602400912917605986812821504
            32,   //2^103=10141204801825835211973625643008
            32,   //2^104=20282409603651670423947251286016
            32,   //2^105=40564819207303340847894502572032
            32,   //2^106=81129638414606681695789005144064
            33,   //2^107=162259276829213363391578010288128
            33,   // 2^108
            33,   // 2^109
            34,   // 2^110
            34,   // 2^111
            34,   // 2^112
            35,   // 2^113
            35,   // 2^114
            35,   // 2^115
            35,   // 2^116
            36,   // 2^117
            36,   // 2^118
            36,   // 2^119
            37,   // 2^120
            37,   // 2^121
            37,   // 2^122
            38,   // 2^123
            38,   // 2^124
            38,   // 2^125
            38,   // 2^126
            39,   // 2^127
            39    // 2^128
        };

        private static ReadOnlySpan<(ulong, ulong)> bid_power10_table_128 => new (ulong, ulong)[]
        {
            (0x0000000000000001UL, 0x0000000000000000UL), // 10^0
            (0x000000000000000aUL, 0x0000000000000000UL), // 10^1
            (0x0000000000000064UL, 0x0000000000000000UL), // 10^2
            (0x00000000000003e8UL, 0x0000000000000000UL), // 10^3
            (0x0000000000002710UL, 0x0000000000000000UL), // 10^4
            (0x00000000000186a0UL, 0x0000000000000000UL), // 10^5
            (0x00000000000f4240UL, 0x0000000000000000UL), // 10^6
            (0x0000000000989680UL, 0x0000000000000000UL), // 10^7
            (0x0000000005f5e100UL, 0x0000000000000000UL), // 10^8
            (0x000000003b9aca00UL, 0x0000000000000000UL), // 10^9
            (0x00000002540be400UL, 0x0000000000000000UL), // 10^10
            (0x000000174876e800UL, 0x0000000000000000UL), // 10^11
            (0x000000e8d4a51000UL, 0x0000000000000000UL), // 10^12
            (0x000009184e72a000UL, 0x0000000000000000UL), // 10^13
            (0x00005af3107a4000UL, 0x0000000000000000UL), // 10^14
            (0x00038d7ea4c68000UL, 0x0000000000000000UL), // 10^15
            (0x002386f26fc10000UL, 0x0000000000000000UL), // 10^16
            (0x016345785d8a0000UL, 0x0000000000000000UL), // 10^17
            (0x0de0b6b3a7640000UL, 0x0000000000000000UL), // 10^18
            (0x8ac7230489e80000UL, 0x0000000000000000UL), // 10^19
            (0x6bc75e2d63100000UL, 0x0000000000000005UL), // 10^20
            (0x35c9adc5dea00000UL, 0x0000000000000036UL), // 10^21
            (0x19e0c9bab2400000UL, 0x000000000000021eUL), // 10^22
            (0x02c7e14af6800000UL, 0x000000000000152dUL), // 10^23
            (0x1bcecceda1000000UL, 0x000000000000d3c2UL), // 10^24
            (0x161401484a000000UL, 0x0000000000084595UL), // 10^25
            (0xdcc80cd2e4000000UL, 0x000000000052b7d2UL), // 10^26
            (0x9fd0803ce8000000UL, 0x00000000033b2e3cUL), // 10^27
            (0x3e25026110000000UL, 0x00000000204fce5eUL), // 10^28
            (0x6d7217caa0000000UL, 0x00000001431e0faeUL), // 10^29
            (0x4674edea40000000UL, 0x0000000c9f2c9cd0UL), // 10^30
            (0xc0914b2680000000UL, 0x0000007e37be2022UL), // 10^31
            (0x85acef8100000000UL, 0x000004ee2d6d415bUL), // 10^32
            (0x38c15b0a00000000UL, 0x0000314dc6448d93UL), // 10^33
            (0x378d8e6400000000UL, 0x0001ed09bead87c0UL), // 10^34
            (0x2b878fe800000000UL, 0x0013426172c74d82UL), // 10^35
            (0xb34b9f1000000000UL, 0x00c097ce7bc90715UL), // 10^36
            (0x00f436a000000000UL, 0x0785ee10d5da46d9UL), // 10^37
            (0x098a224000000000UL, 0x4b3b4ca85a86c47aUL), // 10^38
        };

        private static ReadOnlySpan<int> bid_estimate_bin_expon => new int[]
        {
            0,    // 10^0
            3,    // 10^1
            6,    // 10^2
            9,    // 10^3
            13,   // 10^4
            16,   // 10^5
            19,   // 10^6
            23,   // 10^7
            26,   // 10^8
            29,   // 10^9
            33,   // 10^10
            36,   // 10^11
            39,   // 10^12
            43,   // 10^13
            46,   // 10^14
            49,   // 10^15
            53    // 10^16
        };

        private static ReadOnlySpan<ulong> bid_power10_index_binexp => new ulong[]
        {
            0x000000000000000aUL,
            0x000000000000000aUL,
            0x000000000000000aUL,
            0x000000000000000aUL,
            0x0000000000000064UL,
            0x0000000000000064UL,
            0x0000000000000064UL,
            0x00000000000003e8UL,
            0x00000000000003e8UL,
            0x00000000000003e8UL,
            0x0000000000002710UL,
            0x0000000000002710UL,
            0x0000000000002710UL,
            0x0000000000002710UL,
            0x00000000000186a0UL,
            0x00000000000186a0UL,
            0x00000000000186a0UL,
            0x00000000000f4240UL,
            0x00000000000f4240UL,
            0x00000000000f4240UL,
            0x0000000000989680UL,
            0x0000000000989680UL,
            0x0000000000989680UL,
            0x0000000000989680UL,
            0x0000000005f5e100UL,
            0x0000000005f5e100UL,
            0x0000000005f5e100UL,
            0x000000003b9aca00UL,
            0x000000003b9aca00UL,
            0x000000003b9aca00UL,
            0x00000002540be400UL,
            0x00000002540be400UL,
            0x00000002540be400UL,
            0x00000002540be400UL,
            0x000000174876e800UL,
            0x000000174876e800UL,
            0x000000174876e800UL,
            0x000000e8d4a51000UL,
            0x000000e8d4a51000UL,
            0x000000e8d4a51000UL,
            0x000009184e72a000UL,
            0x000009184e72a000UL,
            0x000009184e72a000UL,
            0x000009184e72a000UL,
            0x00005af3107a4000UL,
            0x00005af3107a4000UL,
            0x00005af3107a4000UL,
            0x00038d7ea4c68000UL,
            0x00038d7ea4c68000UL,
            0x00038d7ea4c68000UL,
            0x002386f26fc10000UL,
            0x002386f26fc10000UL,
            0x002386f26fc10000UL,
            0x002386f26fc10000UL,
            0x016345785d8a0000UL,
            0x016345785d8a0000UL,
            0x016345785d8a0000UL,
            0x0de0b6b3a7640000UL,
            0x0de0b6b3a7640000UL,
            0x0de0b6b3a7640000UL,
            0x8ac7230489e80000UL,
            0x8ac7230489e80000UL,
            0x8ac7230489e80000UL,
            0x8ac7230489e80000UL
        };

        private static ReadOnlySpan<int> bid_short_recip_scale => new int[]
        {
            1,
            65 - 64,
            69 - 64,
            71 - 64,
            75 - 64,
            78 - 64,
            81 - 64,
            85 - 64,
            88 - 64,
            91 - 64,
            95 - 64,
            98 - 64,
            101 - 64,
            105 - 64,
            108 - 64,
            111 - 64,
            115 - 64, //114 - 64
            118 - 64
        };

        private static ReadOnlySpan<ulong> bid_reciprocals10_64 => new ulong[]
        {
            1UL,  // dummy value for 0 extra digits
            0x3333333333333334UL, // 1 extra digit
            0x51eb851eb851eb86UL,
            0x20c49ba5e353f7cfUL,
            0x346dc5d63886594bUL,
            0x29f16b11c6d1e109UL,
            0x218def416bdb1a6eUL,
            0x35afe535795e90b0UL,
            0x2af31dc4611873c0UL,
            0x225c17d04dad2966UL,
            0x36f9bfb3af7b7570UL,
            0x2bfaffc2f2c92ac0UL,
            0x232f33025bd42233UL,
            0x384b84d092ed0385UL,
            0x2d09370d42573604UL,
            0x24075f3dceac2b37UL,
            0x39a5652fb1137857UL,
            0x2e1dea8c8da92d13UL
        };

        private static ReadOnlySpan<int> bid_bid_bid_recip_scale32 => new int[]
        {
            1,
            33-32,
            35-32,
            39-32,
            43-32,
            46-32,
            50-32,
            53-32,
            57-32
        };

        private static ReadOnlySpan<ulong> bid_bid_reciprocals10_32 => new ulong[]
        {
            1UL, //dummy,
            0x33333334UL,
            0x147AE148UL,
            0x20C49BA6UL,
            0x346DC5D7UL, //4
            0x29F16B12UL,
            0x431BDE83UL,
            0x35AFE536UL,
            0x55E63B89UL
        };

        // TODO put bid_power10_index_binexp_128 here

    }
}
