// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.

namespace System.Numerics
{
    internal static partial class IeeeDecimalNumber
    {

        // PORT: original table has more entries for more rounding modes, which were removed as we do not support rounding modes
        private static ReadOnlySpan<(ulong, ulong)> bid_roundbound_128 => new (ulong, ulong)[]
        {
            (0UL, (1UL << 63)),       // BID_ROUNDING_TO_NEAREST | positive | even
            (~0UL, (1UL << 63) - 1),    // BID_ROUNDING_TO_NEAREST | positive | odd
            (0UL, (1UL << 63)), // BID_ROUNDING_TO_NEAREST | negative | even
            (~0UL, (1UL << 63) - 1)    // BID_ROUNDING_TO_NEAREST | negative | odd
        };

        private static ReadOnlySpan<ulong> bid_breakpoints_binary32 => new ulong[]
        {
            17291492046443221751UL, 474778387287989UL,
            17522542451896487724UL, 379822709830391UL,
            10328685146775279856UL, 303858167864313UL,
            12836547420098537447UL, 486173068582901UL,
            6579889121336919634UL, 388938454866321UL,
            1574562482327625384UL, 311150763893057UL,
            6208648786466110938UL, 497841222228891UL,
            1277570214430978427UL, 398272977783113UL,
            8400753801028603388UL, 318618382226490UL,
            13441206081645765421UL, 509789411562384UL,
            14442313680058522660UL, 407831529249907UL,
            4175153314562997481UL, 326265223399926UL,
            17748291747526526940UL, 522024357439881UL,
            10509284583279311229UL, 417619485951905UL,
            8407427666623448983UL, 334095588761524UL,
            2383837822371787403UL, 534552942018439UL,
            5596419072639340246UL, 427642353614751UL,
            787786443369561873UL, 342113882891801UL,
            12328504753617029967UL, 547382212626881UL,
            6173454988151713650UL, 437905770101505UL,
            4938763990521370920UL, 350324616081204UL,
            15280720014318014119UL, 560519385729926UL,
            8535227196712500972UL, 448415508583941UL,
            3138832942628090454UL, 358732406867153UL,
            9889763983586293010UL, 286985925493722UL,
            1066227114770427523UL, 459177480789956UL,
            15610376950783983311UL, 367341984631964UL,
            16177650375369096972UL, 293873587705571UL,
            58798897397182893UL, 470197740328915UL,
            47039117917746314UL, 376158192263132UL,
            11105677738559928021UL, 300926553810505UL,
            17769084381695884834UL, 481482486096808UL,
            3147221061130976897UL, 385185988877447UL,
            13585823293130512487UL, 308148791101957UL,
            6979922010041178687UL, 493038065763132UL,
            16651984052258673919UL, 394430452610505UL,
            13321587241806939135UL, 315544362088404UL,
            10246493142665371647UL, 504870979341447UL,
            818496884648476671UL, 403896783473158UL,
            8033495137202601983UL, 323117426778526UL,
            5474894590040342527UL, 516987882845642UL,
            15447962116258004991UL, 413590306276513UL,
            1290323248780673023UL, 330872245021211UL,
            13132563642274807807UL, 529395592033937UL,
            3127353284336025599UL, 423516473627150UL,
            2501882627468820479UL, 338813178901720UL,
            4003012203950112767UL, 542101086242752UL,
            14270456207385821183UL, 433680868994201UL,
            7727016151166746623UL, 346944695195361UL,
            4984528212382973951UL, 555111512312578UL,
            11366320199390199807UL, 444089209850062UL,
            1714358530028339199UL, 355271367880050UL,
            1371486824022671359UL, 284217094304040UL,
            2194378918436274175UL, 454747350886464UL,
            5444851949490929663UL, 363797880709171UL,
            666532744850833407UL, 291038304567337UL,
            4755801206503243775UL, 465661287307739UL,
            7493989779944505343UL, 372529029846191UL,
            2305843009213693951UL, 298023223876953UL,
            18446744073709551615UL, 476837158203124UL,
            18446744073709551615UL, 381469726562499UL,
            18446744073709551615UL, 305175781249999UL,
            18446744073709551615UL, 488281249999999UL,
            18446744073709551615UL, 390624999999999UL,
            18446744073709551615UL, 312499999999999UL,
            18446744073709551615UL, 499999999999999UL,
            18446744073709551615UL, 399999999999999UL,
            18446744073709551615UL, 319999999999999UL,
            18446744073709551615UL, 511999999999999UL,
            18446744073709551615UL, 409599999999999UL,
            18446744073709551615UL, 327679999999999UL,
            18446744073709551615UL, 524287999999999UL,
            18446744073709551615UL, 419430399999999UL,
            18446744073709551615UL, 335544319999999UL,
            18446744073709551615UL, 536870911999999UL,
            18446744073709551615UL, 429496729599999UL,
            18446744073709551615UL, 343597383679999UL,
            18446744073709551615UL, 549755813887999UL,
            18446744073709551615UL, 439804651110399UL,
            18446744073709551615UL, 351843720888319UL,
            18446744073709551615UL, 281474976710655UL,
            11068046444225730969UL, 450359962737049UL,
            12543785970122495098UL, 360287970189639UL,
            13724377590839906402UL, 288230376151711UL,
            14580306515860029597UL, 461168601842738UL,
            596198768462292708UL, 368934881474191UL,
            15234354273737475459UL, 295147905179352UL,
            9617571579012319442UL, 472236648286964UL,
            11383406077951765876UL, 377789318629571UL,
            5417376047619502378UL, 302231454903657UL,
            12357150490933114128UL, 483570327845851UL,
            6196371578004580979UL, 386856262276681UL,
            1267748447661754460UL, 309485009821345UL,
            2028397516258807136UL, 495176015714152UL,
            12690764457232776679UL, 396140812571321UL,
            6463262751044311020UL, 316912650057057UL,
            14030569216412807955UL, 507060240091291UL,
            7535106558388336041UL, 405648192073033UL,
            13406782876194489479UL, 324518553658426UL,
            14072154972427362520UL, 519229685853482UL,
            3879026348458069369UL, 415383748682786UL,
            17860616337734096788UL, 332306998946228UL,
            6440893251923092922UL, 531691198313966UL,
            1463365786796564015UL, 425352958651173UL,
            8549390258921071858UL, 340282366920938UL,
            9989675599531804650UL, 544451787073501UL,
            4302391664883533397UL, 435561429658801UL,
            18199308590874468010UL, 348449143727040UL,
            10672149671689597200UL, 557518629963265UL,
            8537719737351677760UL, 446014903970612UL,
            17898222234107073178UL, 356811923176489UL,
            18007926602027568865UL, 285449538541191UL,
            2987240860050737922UL, 456719261665907UL,
            13457839132266321307UL, 365375409332725UL,
            10766271305813057046UL, 292300327466180UL,
            17226034089300891273UL, 467680523945888UL,
            2712780827214982049UL, 374144419156711UL,
            16927619920739626932UL, 299315535325368UL,
            4948098984731941152UL, 478904856520590UL,
            3958479187785552922UL, 383123885216472UL
        };

        private static ReadOnlySpan<int> bid_exponents_binary32 => new int[]
        {
            -27,
            -24,
            -21,
            -17,
            -14,
            -11,
            -7,
            -4,
            -1,
            3,
            6,
            9,
            13,
            16,
            19,
            23,
            26,
            29,
            33,
            36,
            39,
            43,
            46,
            49,
            52,
            56,
            59,
            62,
            66,
            69,
            72,
            76,
            79,
            82,
            86,
            89,
            92,
            96,
            99,
            102,
            106,
            109,
            112,
            116,
            119,
            122,
            126,
            129,
            132,
            136,
            139,
            142,
            145,
            149,
            152,
            155,
            159,
            162,
            165,
            169,
            172,
            175,
            179,
            182,
            185,
            189,
            192,
            195,
            199,
            202,
            205,
            209,
            212,
            215,
            219,
            222,
            225,
            229,
            232,
            235,
            238,
            242,
            245,
            248,
            252,
            255,
            258,
            262,
            265,
            268,
            272,
            275,
            278,
            282,
            285,
            288,
            292,
            295,
            298,
            302,
            305,
            308,
            312,
            315,
            318,
            322,
            325,
            328,
            332,
            335,
            338,
            341,
            345,
            348,
            351,
            355,
            358,
            361,
            365,
            368,
        };

        private static ReadOnlySpan<ulong> bid_multipliers1_binary32 => new ulong[]
        {
            6013890151484785128UL, 7481633477359093489UL,
                655737588518723529UL, 651851512427UL,
            12129048707783369314UL, 13963727865126254765UL,
              14654730040930568123UL, 814814390533UL,
            1326252829447047930UL, 12842973812980430553UL,
              4483354495881046442UL, 1018517988167UL,
            12358123064472874716UL, 12638544651540156999UL,
              9719625587566735882UL, 636573742604UL,
            10835967812163705491UL, 6574808777570420441UL,
              12149531984458419853UL, 795717178255UL,
            18156645783632019768UL, 12830196990390413455UL,
              10575228962145636912UL, 994646472819UL,
            18265432642411094211UL, 8018873118994008409UL,
              4303675092127329118UL, 621654045512UL,
            8996732747731704052UL, 800219361887734704UL, 5379593865159161398UL,
              777067556890UL,
            11245915934664630065UL, 10223646239214444188UL,
              15947864368303727555UL, 971334446112UL,
            16252069496020169599UL, 4083935890295333665UL,
              9967415230189829722UL, 607084028820UL,
            6480028814743048286UL, 14328291899723942890UL,
              12459269037737287152UL, 758855036025UL,
            17323408055283586166UL, 17910364874654928612UL,
              1739028241889445228UL, 948568795032UL,
            1603757997697465546UL, 1970606009804554575UL,
              1086892651180903268UL, 592855496895UL,
            15839755552403995644UL, 2463257512255693218UL,
              15193673869258292797UL, 741069371118UL,
            10576322403650218747UL, 7690757908747004427UL,
              9768720299718090188UL, 926336713898UL,
            4304358493067692765UL, 14030095729821653575UL,
              10717136205751194271UL, 578960446186UL,
            768762097907228052UL, 12925933643849679065UL,
              4173048220334217031UL, 723700557733UL,
            5572638640811422969UL, 11545731036384710927UL,
              9827996293845159193UL, 904625697166UL,
            10400428178148221212UL, 298552870099362473UL,
              1530811665225836592UL, 565391060729UL,
            17612221241112664419UL, 373191087624203091UL,
              6525200599959683644UL, 706738825911UL,
            17403590532963442619UL, 466488859530253864UL,
              3544814731522216651UL, 883423532389UL,
            10877244083102151637UL, 16432456601702266329UL,
              4521352216415079358UL, 552139707743UL,
            18208241122305077450UL, 11317198715273057103UL,
              1040004252091461294UL, 690174634679UL,
            18148615384453958909UL, 4923126357236545571UL,
              15135063370396490330UL, 862718293348UL,
            18074083212140060732UL, 15377279983400457772UL,
              472085139286061296UL, 1078397866686UL,
            2072929970732762150UL, 9610799989625286108UL,
              14130111267335952022UL, 673998666678UL,
            2591162463415952687UL, 2790127950176831827UL,
              8439267047315164220UL, 842498333348UL,
            17074011134552104570UL, 3487659937721039783UL,
              10549083809143955275UL, 1053122916685UL,
            17588785986736147213UL, 18320688525571507528UL,
              8899020389928665998UL, 658201822928UL,
            3539238409710632400UL, 13677488620109608603UL,
              11123775487410832498UL, 822752278660UL,
            18259106067420454212UL, 7873488738282234945UL,
              13904719359263540623UL, 1028440348325UL,
            4494412264496702026UL, 11838459489067478697UL,
              10996292608753406841UL, 642775217703UL,
            10229701349048265437UL, 963016306052184659UL,
              9133679742514370648UL, 803469022129UL,
            8175440667882943892UL, 1203770382565230824UL,
              16028785696570351214UL, 1004336277661UL,
            5109650417426839933UL, 14587414544385432977UL,
              12323834069570163460UL, 627710173538UL,
            10998749040210937820UL, 18234268180481791221UL,
              6181420550107928517UL, 784637716923UL,
            18360122318691060179UL, 8957777170320075314UL,
              3115089669207522743UL, 980797146154UL,
            16086762467609300516UL, 12516139759091128927UL,
              6558617061682089618UL, 612998216346UL,
            15496767066084237741UL, 6421802662009135351UL,
              17421643363957387831UL, 766247770432UL,
            14759272814177909272UL, 3415567309084031285UL,
              3330310131237183173UL, 957809713041UL,
            11530388518074887247UL, 4440572577391213505UL,
              13610658878091709243UL, 598631070650UL,
            577927592311445347UL, 939029703311628978UL, 7789951560759860746UL,
              748288838313UL,
            9945781527244082491UL, 10397159165994312030UL,
              14349125469377213836UL, 935361047891UL,
            1604427436100163653UL, 15721596515601220827UL,
              6662360409147064695UL, 584600654932UL,
            15840592350407368278UL, 15040309626074138129UL,
              8327950511433830869UL, 730750818665UL,
            5965682382727046636UL, 4965328977310508950UL,
              15021624157719676491UL, 913438523331UL,
            17563609544486567859UL, 797487601605374141UL,
              7082672089361103855UL, 570899077082UL,
            8119453875326046112UL, 14831917557288881389UL,
              18076712148556155626UL, 713623846352UL,
            14761003362584945544UL, 9316524909756325928UL,
              4149146111985642917UL, 892029807941UL,
            9225627101615590965UL, 8128671077811397657UL,
              4899059329204720775UL, 557518629963UL,
            16143719895446876610UL, 5549152828836859167UL,
              1512138143078513065UL, 696898287454UL,
            15567963850881207859UL, 11548127054473461863UL,
              11113544715702917139UL, 871122859317UL,
            14848268795174121920UL, 9823472799664439425UL, 56872839346482712UL,
              1088903574147UL,
            2362638969342744344UL, 6139670499790274641UL,
              16176446589087409359UL, 680564733841UL,
            7564984730105818334UL, 3062902106310455397UL,
              6385500181077097987UL, 850705917302UL,
            14067916931059660821UL, 17663685688170232958UL,
              17205247263201148291UL, 1063382396627UL,
            4180762063484900109UL, 8733960545892701647UL,
              8447436530287023730UL, 664613997892UL,
            614266560928737233UL, 1694078645511101251UL,
              10559295662858779663UL, 830767497365UL,
            14602891256443085253UL, 15952656362171040275UL,
              17810805597000862482UL, 1038459371706UL,
            6820964026063234331UL, 14582096244784288076UL,
              15743439516552926955UL, 649037107316UL,
            8526205032579042914UL, 13615934287552972191UL,
              1232555321981607078UL, 811296384146UL,
            6046070272296415738UL, 7796545822586439431UL,
              10764066189331784656UL, 1014120480182UL,
            10696322947826341692UL, 4872841139116524644UL,
              2115855349904977506UL, 633825300114UL,
            13370403684782927115UL, 15314423460750431613UL,
              11868191224235997690UL, 792281625142UL,
            2877946550696495182UL, 9919657289083263709UL,
              5611866993440221305UL, 990352031428UL,
            4104559603399003441UL, 17729000851745509578UL,
              12730788907754914123UL, 618970019642UL,
            14354071541103530109UL, 17549565046254499068UL,
              6690114097838866846UL, 773712524553UL,
            17942589426379412636UL, 12713584270963348027UL,
              12974328640725971462UL, 967140655691UL,
            8908275382273438946UL, 3334304150924704613UL,
              5803112391240038212UL, 604462909807UL,
            15747030246269186586UL, 4167880188655880766UL,
              2642204470622659861UL, 755578637259UL,
            10460415770981707425UL, 9821536254247238862UL,
              17137813643560488538UL, 944473296573UL,
            1926073838436179237UL, 10750146177331912193UL,
              13016976536438999288UL, 590295810358UL,
            7019278316472611950UL, 13437682721664890241UL,
              7047848633693973302UL, 737869762948UL,
            13385783914018152841UL, 7573731365226336993UL,
              8809810792117466628UL, 922337203685UL,
            1448585918620263670UL, 13956954140121236429UL,
              7811974754287110594UL, 576460752303UL,
            6422418416702717491UL, 8222820638296769728UL,
              5153282424431500339UL, 720575940379UL,
            8028023020878396864UL, 5666839779443574256UL,
              1829917012111987520UL, 900719925474UL,
            5017514388048998040UL, 3541774862152233910UL,
              5755384150997380104UL, 562949953421UL,
            15495265021916023358UL, 4427218577690292387UL,
              11805916207174113034UL, 703687441776UL,
            14757395258967641293UL, 14757395258967641292UL,
              14757395258967641292UL, 879609302220UL,
            0UL, 0UL, 0UL, 1099511627776UL,
            0UL, 0UL, 0UL, 687194767360UL,
            0UL, 0UL, 0UL, 858993459200UL,
            0UL, 0UL, 0UL, 1073741824000UL,
            0UL, 0UL, 0UL, 671088640000UL,
            0UL, 0UL, 0UL, 838860800000UL,
            0UL, 0UL, 0UL, 1048576000000UL,
            0UL, 0UL, 0UL, 655360000000UL,
            0UL, 0UL, 0UL, 819200000000UL,
            0UL, 0UL, 0UL, 1024000000000UL,
            0UL, 0UL, 0UL, 640000000000UL,
            0UL, 0UL, 0UL, 800000000000UL,
            0UL, 0UL, 0UL, 1000000000000UL,
            0UL, 0UL, 0UL, 625000000000UL,
            0UL, 0UL, 0UL, 781250000000UL,
            0UL, 0UL, 0UL, 976562500000UL,
            0UL, 0UL, 0UL, 610351562500UL,
            0UL, 0UL, 0UL, 762939453125UL,
            0UL, 0UL, 4611686018427387904UL, 953674316406UL,
            0UL, 0UL, 16717361816799281152UL, 596046447753UL,
            0UL, 0UL, 7061644215716937728UL, 745058059692UL,
            0UL, 0UL, 8827055269646172160UL, 931322574615UL,
            0UL, 0UL, 12434438571169939456UL, 582076609134UL,
            0UL, 0UL, 6319676177107648512UL, 727595761418UL,
            0UL, 0UL, 17122967258239336448UL, 909494701772UL,
            0UL, 0UL, 1478482499544809472UL, 568434188608UL,
            0UL, 0UL, 1848103124431011840UL, 710542735760UL,
            0UL, 0UL, 2310128905538764800UL, 888178419700UL,
            0UL, 0UL, 10667202602816503808UL, 555111512312UL,
            0UL, 0UL, 13334003253520629760UL, 693889390390UL,
            0UL, 0UL, 7444132030046011392UL, 867361737988UL,
            0UL, 0UL, 9305165037557514240UL, 1084202172485UL,
            0UL, 0UL, 8121571157687140352UL, 677626357803UL,
            0UL, 0UL, 5540277928681537536UL, 847032947254UL,
            0UL, 0UL, 16148719447706697728UL, 1058791184067UL,
            0UL, 0UL, 7787106645602992128UL, 661744490042UL,
            0UL, 0UL, 510511270148964352UL, 827180612553UL,
            0UL, 0UL, 5249825106113593344UL, 1033975765691UL,
            0UL, 0UL, 975297682107301888UL, 646234853557UL,
            0UL, 0UL, 5830808121061515264UL, 807793566946UL
        };

        private static ReadOnlySpan<ulong> bid_multipliers2_binary32 => new ulong[]
        {
            12230317112597168372UL, 12964188775534322552UL,
                  9551240831114137572UL, 325925756213UL,
            15287896390746460465UL, 16205235969417903190UL,
              16550737057320059869UL, 407407195266UL,
            9886498451578299773UL, 6421486906490215276UL,
              11465049284795299029UL, 509258994083UL,
            15402433569091213166UL, 6319272325770078499UL,
              4859812793783367941UL, 318286871302UL,
            14641355942936628554UL, 12510776425639986028UL,
              15298138029083985734UL, 397858589127UL,
            18301694928670785692UL, 6415098495195206727UL,
              14510986517927594264UL, 497323236409UL,
            18356088358060322914UL, 4009436559497004204UL,
              2151837546063664559UL, 310827022756UL,
            4498366373865852026UL, 400109680943867352UL, 2689796932579580699UL,
              388533778445UL,
            5622957967332315033UL, 14335195156461997902UL,
              7973932184151863777UL, 485667223056UL,
            17349406784864860608UL, 2041967945147666832UL,
              4983707615094914861UL, 303542014410UL,
            3240014407371524143UL, 7164145949861971445UL,
              15453006555723419384UL, 379427518012UL,
            8661704027641793083UL, 8955182437327464306UL, 869514120944722614UL,
              474284397516UL,
            10025251035703508581UL, 985303004902277287UL,
              9766818362445227442UL, 296427748447UL,
            7919877776201997822UL, 10455000792982622417UL,
              7596836934629146398UL, 370534685559UL,
            14511533238679885182UL, 3845378954373502213UL,
              4884360149859045094UL, 463168356949UL,
            11375551283388622191UL, 16238419901765602595UL,
              5358568102875597135UL, 289480223093UL,
            9607753085808389834UL, 15686338858779615340UL,
              11309896147021884323UL, 361850278866UL,
            12009691357260487293UL, 14996237555047131271UL,
              4913998146922579596UL, 452312848583UL,
            14423586125928886414UL, 149276435049681236UL,
              9988777869467694104UL, 282695530364UL,
            18029482657411108018UL, 186595543812101545UL,
              12485972336834617630UL, 353369412955UL,
            8701795266481721310UL, 9456616466619902740UL,
              10995779402615884133UL, 441711766194UL,
            14661994078405851627UL, 8216228300851133164UL,
              11484048145062315487UL, 276069853871UL,
            18327492598007314533UL, 5658599357636528551UL,
              9743374162900506455UL, 345087317339UL,
            18297679729081755263UL, 2461563178618272785UL,
              7567531685198245165UL, 431359146674UL,
            9037041606070030366UL, 7688639991700228886UL, 236042569643030648UL,
              539198933343UL,
            1036464985366381075UL, 4805399994812643054UL,
              7065055633667976011UL, 336999333339UL,
            10518953268562752152UL, 1395063975088415913UL,
              4219633523657582110UL, 421249166674UL,
            17760377604130828093UL, 10967202005715295699UL,
              14497913941426753445UL, 526561458342UL,
            8794392993368073607UL, 9160344262785753764UL,
              4449510194964332999UL, 329100911464UL,
            10992991241710092008UL, 6838744310054804301UL,
              5561887743705416249UL, 411376139330UL,
            18352925070565002914UL, 13160116405995893280UL,
              16175731716486546119UL, 514220174162UL,
            11470578169103126821UL, 15142601781388515156UL,
              14721518341231479228UL, 321387608851UL,
            14338222711378908527UL, 481508153026092329UL,
              13790211908111961132UL, 401734511064UL,
            4087720333941471946UL, 601885191282615412UL,
              17237764885139951415UL, 502168138830UL,
            11778197245568195775UL, 7293707272192716488UL,
              6161917034785081730UL, 313855086769UL,
            14722746556960244718UL, 18340506127095671418UL,
              12314082311908740066UL, 392318858461UL,
            9180061159345530090UL, 13702260622014813465UL,
              1557544834603761371UL, 490398573077UL,
            17266753270659426066UL, 6258069879545564463UL,
              3279308530841044809UL, 306499108173UL,
            16971755569896894679UL, 12434273367859343483UL,
              8710821681978693915UL, 383123885216UL,
            16603008443943730444UL, 10931155691396791450UL,
              10888527102473367394UL, 478904856520UL,
            14988566295892219432UL, 11443658325550382560UL,
              6805329439045854621UL, 299315535325UL,
            288963796155722674UL, 469514851655814489UL, 13118347817234706181UL,
              374144419156UL,
            4972890763622041246UL, 5198579582997156015UL,
              16397934771543382726UL, 467680523945UL,
            10025585754904857635UL, 17084170294655386221UL,
              3331180204573532347UL, 292300327466UL,
            17143668212058459947UL, 16743526849891844872UL,
              13387347292571691242UL, 365375409332UL,
            2982841191363523318UL, 11706036525510030283UL,
              16734184115714614053UL, 456719261665UL,
            18005176809098059738UL, 9622115837657462878UL,
              3541336044680551927UL, 285449538541UL,
            13283098974517798864UL, 7415958778644440694UL,
              9038356074278077813UL, 356811923176UL,
            7380501681292472772UL, 13881634491732938772UL,
              11297945092847597266UL, 446014903970UL,
            13836185587662571291UL, 13287707575760474636UL,
              11672901701457136195UL, 278759314981UL,
            17295231984578214113UL, 11997948451273205391UL,
              756069071539256532UL, 348449143727UL,
            17007353962295379738UL, 14997435564091506739UL,
              14780144394706234377UL, 435561429658UL,
            16647506434441836768UL, 4911736399832219712UL,
              9251808456528017164UL, 544451787073UL,
            10404691521526147980UL, 12293207286749913128UL,
              17311595331398480487UL, 340282366920UL,
            13005864401907684975UL, 10754823090010003506UL,
              3192750090538548993UL, 425352958651UL,
            7033958465529830411UL, 18055214880939892287UL,
              17825995668455349953UL, 531691198313UL,
            11313753068597225863UL, 4366980272946350823UL,
              4223718265143511865UL, 332306998946UL,
            9530505317319144425UL, 10070411359610326433UL,
              14503019868284165639UL, 415383748682UL,
            16524817665076318435UL, 7976328181085520137UL,
              8905402798500431241UL, 519229685853UL,
            3410482013031617166UL, 16514420159246919846UL,
              7871719758276463477UL, 324518553658UL,
            13486474553144297265UL, 6807967143776486095UL,
              616277660990803539UL, 405648192073UL,
            12246407173002983677UL, 3898272911293219715UL,
              5382033094665892328UL, 507060240091UL,
            5348161473913170846UL, 2436420569558262322UL,
              1057927674952488753UL, 316912650057UL,
            15908573879246239366UL, 7657211730375215806UL,
              5934095612117998845UL, 396140812571UL,
            10662345312203023399UL, 14183200681396407662UL,
              2805933496720110652UL, 495176015714UL,
            2052279801699501721UL, 18087872462727530597UL,
              6365394453877457061UL, 309485009821UL,
            7177035770551765055UL, 8774782523127249534UL,
              12568429085774209231UL, 386856262276UL,
            18194666750044482126UL, 6356792135481674013UL,
              15710536357217761539UL, 483570327845UL,
            13677509727991495281UL, 1667152075462352306UL,
              12124928232474794914UL, 302231454903UL,
            7873515123134593293UL, 11307312131182716191UL,
              10544474272166105738UL, 377789318629UL,
            5230207885490853713UL, 4910768127123619431UL,
              17792278858635020077UL, 472236648286UL,
            10186408956072865427UL, 5375073088665956096UL,
              6508488268219499644UL, 295147905179UL,
            12733011195091081783UL, 6718841360832445120UL,
              3523924316846986651UL, 368934881474UL,
            15916263993863852229UL, 3786865682613168496UL,
              13628277432913509122UL, 461168601842UL,
            9947664996164907643UL, 6978477070060618214UL,
              13129359413998331105UL, 288230376151UL,
            3211209208351358746UL, 13334782356003160672UL,
              11800013249070525977UL, 360287970189UL,
            4014011510439198432UL, 2833419889721787128UL, 914958506055993760UL,
              450359962737UL,
            2508757194024499020UL, 1770887431076116955UL,
              12101064112353465860UL, 281474976710UL,
            16971004547812787487UL, 2213609288845146193UL,
              5902958103587056517UL, 351843720888UL,
            7378697629483820647UL, 7378697629483820646UL,
              7378697629483820646UL, 439804651110UL,
            0UL, 0UL, 0UL, 549755813888UL,
            0UL, 0UL, 0UL, 343597383680UL,
            0UL, 0UL, 0UL, 429496729600UL,
            0UL, 0UL, 0UL, 536870912000UL,
            0UL, 0UL, 0UL, 335544320000UL,
            0UL, 0UL, 0UL, 419430400000UL,
            0UL, 0UL, 0UL, 524288000000UL,
            0UL, 0UL, 0UL, 327680000000UL,
            0UL, 0UL, 0UL, 409600000000UL,
            0UL, 0UL, 0UL, 512000000000UL,
            0UL, 0UL, 0UL, 320000000000UL,
            0UL, 0UL, 0UL, 400000000000UL,
            0UL, 0UL, 0UL, 500000000000UL,
            0UL, 0UL, 0UL, 312500000000UL,
            0UL, 0UL, 0UL, 390625000000UL,
            0UL, 0UL, 0UL, 488281250000UL,
            0UL, 0UL, 0UL, 305175781250UL,
            0UL, 0UL, 9223372036854775808UL, 381469726562UL,
            0UL, 0UL, 2305843009213693952UL, 476837158203UL,
            0UL, 0UL, 17582052945254416384UL, 298023223876UL,
            0UL, 0UL, 3530822107858468864UL, 372529029846UL,
            0UL, 0UL, 13636899671677861888UL, 465661287307UL,
            0UL, 0UL, 6217219285584969728UL, 291038304567UL,
            0UL, 0UL, 3159838088553824256UL, 363797880709UL,
            0UL, 0UL, 8561483629119668224UL, 454747350886UL,
            0UL, 0UL, 739241249772404736UL, 284217094304UL,
            0UL, 0UL, 924051562215505920UL, 355271367880UL,
            0UL, 0UL, 1155064452769382400UL, 444089209850UL,
            0UL, 0UL, 5333601301408251904UL, 277555756156UL,
            0UL, 0UL, 6667001626760314880UL, 346944695195UL,
            0UL, 0UL, 3722066015023005696UL, 433680868994UL,
            0UL, 0UL, 13875954555633532928UL, 542101086242UL,
            0UL, 0UL, 13284157615698345984UL, 338813178901UL,
            0UL, 0UL, 2770138964340768768UL, 423516473627UL,
            0UL, 0UL, 17297731760708124672UL, 529395592033UL,
            0UL, 0UL, 3893553322801496064UL, 330872245021UL,
            0UL, 0UL, 9478627671929257984UL, 413590306276UL,
            0UL, 0UL, 11848284589911572480UL, 516987882845UL,
            0UL, 0UL, 9711020877908426752UL, 323117426778UL,
            0UL, 0UL, 2915404060530757632UL, 403896783473UL
            };

        // Pack and return binary floating-point numbers from raw fields
        private static float return_binary32(int s, int e, ulong c)
        {
            uint i = ((uint)s << 31) + ((uint)e << 23) + (uint)c;
            return BitConverter.UInt32BitsToSingle(i);
        }

        // Special cases of returning zero, infinity, NaN as binary FP
        // Take parameters for the sign, and for NaN the significand
        private static float return_binary32_zero(int s) => return_binary32(s, 0, 0);
        private static float return_binary32_inf(int s) => return_binary32(s, 255, 0);
        private static float return_binary32_nan(int s, ulong c_hi) => return_binary32(s, 255, (c_hi >> 42) + (1u << 22)); // TODO are these parameter types right?

        private enum Classification
        {
            Finite,
            Infinity,
            Zero,
            NaN
        }

        private const uint CLZ32_MASK16 = 0xFFFF0000u;
        private const uint CLZ32_MASK8 = 0xFF00FF00u;
        private const uint CLZ32_MASK4 = 0xF0F0F0F0u;
        private const uint CLZ32_MASK2 = 0xCCCCCCCCu;
        private const uint CLZ32_MASK1 = 0xAAAAAAAAu;

        private static int clz32_nz(ulong n)
        {
            return (((n & CLZ32_MASK16) <= (n & ~CLZ32_MASK16)) ? 16 : 0)
                    + (((n & CLZ32_MASK8) <= (n & ~CLZ32_MASK8)) ? 8 : 0)
                    + (((n & CLZ32_MASK4) <= (n & ~CLZ32_MASK4)) ? 4 : 0)
                    + (((n & CLZ32_MASK2) <= (n & ~CLZ32_MASK2)) ? 2 : 0)
                    + (((n & CLZ32_MASK1) <= (n & ~CLZ32_MASK1)) ? 1 : 0);
        }

        private static Classification unpack_bid32(uint x, out int s, out int e, out int k, out ulong c)
        {
            s = (int)x >> 31;
            if ((x & (3UL << 29)) == (3UL << 29))
            {
                if ((x & (0xFUL << 27)) == (0xFUL << 27))
                {
                    // return default values to satisfy "out", these will go unused
                    e = 0;
                    k = 0;
                    c = 0;

                    if ((x & (0x1FUL << 26)) != (0x1FUL << 26))
                    {
                        return Classification.Infinity;
                    }

                    // if ((x & (1ul<<25))!=0) __set_status_flags(pfpsf, BID_INVALID_EXCEPTION);
                    return Classification.NaN;

                }

                e = (int)((x >> 21) & ((1UL << 8) - 1)) - 101;
                c = (1UL << 23) + (x & ((1UL << 21) - 1));
                if ((uint)(c) > 9999999u)
                {
                    k = 0; // return default value to satisfy "out", this will go unused
                    return Classification.Zero;
                }
                k = 0;
            }
            else
            {
                e = (int)((x >> 23) & ((1UL << 8) - 1)) - 101;
                c = x & ((1UL << 23) - 1);
                if (c == 0)
                {
                    k = 0; // return default value to satisfy "out", this will go unused
                    return Classification.Zero;
                }
                k = clz32_nz(c) - 8;
                c <<= k;
            }

            return Classification.Finite;
        }


        // get full 64x64bit product
        //
        private static void __mul_64x64_to_128(out (ulong, ulong) P, ulong CX, ulong CY)
        {
            ulong CXH, CXL, CYH, CYL, PL, PH, PM, PM2;
            CXH = (CX) >> 32;
            CXL = (uint)(CX);
            CYH = (CY) >> 32;
            CYL = (uint)(CY);

            PM = CXH * CYL;
            PH = CXH * CYH;
            PL = CXL * CYL;
            PM2 = CXL * CYH;
            PH += (PM >> 32);
            PM = (ulong)((uint)PM) + PM2 + (PL >> 32);

            P.Item2 = PH + (PM >> 32);
            P.Item1 = (PM << 32) + (uint)PL;
        }

        public static void __add_carry_out(out ulong S, out ulong CY, ulong X, ulong Y)
        {
            ulong X1 = X;
            S = X + Y;
            CY = (S < X1) ? 1UL : 0UL;
        }
        public static void __add_carry_in_out(out ulong S, ref ulong CY, ulong X, ulong Y, ulong CI)
        {
            ulong X1;
            X1 = X + CI;
            S = X1 + Y;
            CY = ((S < X1) || (X1 < CI)) ? 1UL : 0UL;
        }

        private static void __mul_64x256_to_320(out (ulong, ulong, ulong, ulong, ulong, ulong) P, ulong A, (ulong, ulong, ulong, ulong) B)
        {
            (ulong, ulong) lP0;
            (ulong, ulong) lP1;
            (ulong, ulong) lP2;
            (ulong, ulong) lP3;
            ulong lC;

            __mul_64x64_to_128(out lP0, A, B.Item1);
            __mul_64x64_to_128(out lP1, A, B.Item2);
            __mul_64x64_to_128(out lP2, A, B.Item3);
            __mul_64x64_to_128(out lP3, A, B.Item4);
            P.Item1 = lP0.Item1;
            __add_carry_out(out P.Item2, out lC, lP1.Item1, lP0.Item2);
            __add_carry_in_out(out P.Item3, ref lC, lP2.Item1, lP1.Item2, lC);
            __add_carry_in_out(out P.Item4, ref lC, lP3.Item1, lP2.Item2, lC);
            P.Item5 = lP3.Item2 + lC;
            P.Item6 = 0; // this will get overridden
        }

        // Shift 4-part 2^196 * x3 + 2^128 * x2 + 2^64 * x1 + x0
        // right by "c" bits (must have c < 64)
        private static void srl256_short(ref (ulong, ulong, ulong, ulong, ulong, ulong) z, int c)
        {
            (z.Item3) = ((z.Item4) << (64 - (c))) + ((z.Item3) >> (c));
            (z.Item4) = ((z.Item5) << (64 - (c))) + ((z.Item4) >> (c));
            (z.Item5) = ((z.Item6) << (64 - (c))) + ((z.Item5) >> (c));
            (z.Item6) >>= (c);
        }

        // Compare "<" two 2-part unsigned integers
        private static bool lt128(ulong x_hi, ulong x_lo, ulong y_hi, ulong y_lo)
        {
            return (((x_hi) < (y_hi)) || (((x_hi) == (y_hi)) && ((x_lo) < (y_lo))));
        }

        // Likewise "<="
        private static bool le128(ulong x_hi, ulong x_lo, ulong y_hi, ulong y_lo)
        {
            return (((x_hi) < (y_hi)) || (((x_hi) == (y_hi)) && ((x_lo) <= (y_lo))));
        }

        public static float Decimal32ToSingle(Decimal32 value)
        {
            uint x = value._value;

            ulong c_prov;
            (ulong, ulong) c; // tuple containing 2 ulongs for 128 bits total
            (ulong, ulong) m_min; // tuple containing 2 ulongs for 128 bits total
            int s, e, k, e_out;
            (ulong, ulong, ulong, ulong) r; // tuple containing 4 ulongs for 256 bits total
            (ulong, ulong, ulong, ulong, ulong, ulong) z; // tuple containing 6 ulongs for 384 bits total

            // PORT: Removed support for alternative rounding modes

            // Unpack decimal floating-point number x into sign,exponent,coefficient
            // In special cases, call the macros provided
            // Coefficient is normalized in the binary sense with postcorrection k,
            // so that x = 10^e * c / 2^k and the range of c is:
            //
            // 2^23 <= c < 2^24   (decimal32)
            // 2^53 <= c < 2^54   (decimal64)
            // 2^112 <= c < 2^113 (decimal128)

            switch (unpack_bid32(x, out s, out e, out k, out c.Item2))
            {
                case Classification.Infinity: return return_binary32_inf(s);
                case Classification.Zero: return return_binary32_zero(s);
                case Classification.NaN: return return_binary32_nan(s, ((x & 0xFFFFFu) > 999999u) ? 0UL : (((ulong)x) << 44));
                    // Classification.Finite will continue onward
            }

            // Correct to 2^112 <= c < 2^113 with corresponding exponent adding 113-24=89
            // Thus a shift of 25 given that we've already upacked in c[1]

            c.Item2 <<= 25;
            c.Item1 = 0;
            k += 89;

            // Check for "trivial" overflow, when 10^e * 1 > 2^{sci_emax+1}, just to
            // keep tables smaller (it would be intercepted later otherwise).
            //
            // (Note that we may have normalized the coefficient, but we have a
            //  corresponding exponent postcorrection to account for; this can
            //  afford to be conservative anyway.)
            //
            // We actually check if e >= ceil((sci_emax + 1) * log_10(2))
            // which in this case is e >= ceil(128 * log_10(2)) = 39

            if (e >= 39)
            {
                // PORT: Removed support for status flag setting
                return return_binary32_inf(s);
            }
            // Also check for "trivial" underflow, when 10^e * 2^113 <= 2^emin * 1/4,
            // so test e <= floor((emin - 115) * log_10(2))
            // In this case just fix ourselves at that value for uniformity.
            //
            // This is important not only to keep the tables small but to maintain the
            // testing of the round/sticky words as a correct rounding method

            if (e <= -80)
            {
                e = -80;
            }

            // Look up the breakpoint and approximate exponent

            m_min = (bid_breakpoints_binary32[2 * (e + 80)], bid_breakpoints_binary32[2 * (e + 80) + 1]);
            e_out = bid_exponents_binary32[2 * (e + 80)] - k;

            // Choose provisional exponent and reciprocal multiplier based on breakpoint
            if (c.Item2 <= m_min.Item2)
            {
                r = (bid_multipliers1_binary32[4 * (e + 80)],
                    bid_multipliers1_binary32[4 * (e + 80) + 1],
                    bid_multipliers1_binary32[4 * (e + 80) + 2],
                    bid_multipliers1_binary32[4 * (e + 80) + 3]);
            }
            else
            {
                r = (bid_multipliers2_binary32[4 * (e + 80)],
                    bid_multipliers2_binary32[4 * (e + 80) + 1],
                    bid_multipliers2_binary32[4 * (e + 80) + 2],
                    bid_multipliers2_binary32[4 * (e + 80) + 3]);
                e_out++;
            }

            // Do the reciprocal multiplication
            __mul_64x256_to_320(out z, c.Item2, r);
            z.Item6 = z.Item5; z.Item5 = z.Item4; z.Item4 = z.Item3; z.Item3 = z.Item2; z.Item2 = z.Item1; z.Item1 = 0;

            // Check for exponent underflow and compensate by shifting the product
            // Cut off the process at precision+2, since we can't really shift further
            if (e_out < 1)
            {
                int d;
                d = 1 - e_out;
                if (d > 26)
                    d = 26;
                e_out = 1;
                srl256_short(ref z, d);
            }
            c_prov = z.Item6;

            // Round using round-sticky words
            // If we spill into the next binade, correct
            // Flag underflow where it may be needed even for |result| = SNN

            if (lt128(
                bid_roundbound_128[((s & 1) << 1) + (int)(c_prov & 1)].Item2, // PORT: the calculation of this index factors in the rounding mode in the original code
                bid_roundbound_128[((s & 1) << 1) + (int)(c_prov & 1)].Item1,
                z.Item5,
                z.Item3
                ))
            {
                c_prov++;
                if (c_prov == (1UL << 24))
                {
                    c_prov = 1UL << 23;
                    e_out++;
                }
            }

            // Check for overflow
            if (e_out >= 255)
            {
                // PORT: Removed support for status flag setting

                // PORT: the original implementation calls return_binary32_ovf,
                // which sometimes returns inf sometimes returns max based on rounding mode.
                // We do not support alternate rounding modes, so this will always return inf
                return return_binary32_inf(s);
            }

            // Modify exponent for a tiny result, otherwise lop the implicit bit
            if (c_prov < (1UL << 23))
            {
                e_out = 0;
            }
            else
            {
                c_prov &= ((1UL << 23) - 1);
            }

            // PORT: Removed support for status flag setting

            // Package up the result as a binary floating-point number
            return return_binary32(s, e_out, c_prov);
        }
    }
}
